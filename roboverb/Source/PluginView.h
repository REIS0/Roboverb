/*
  This file was generated by the Introjucer and is part of Roboverb

  Roboverb: robotic voice and ambience audio effect
  Copyright (C) 2015  Kushview, LLC.  All rights reserved.

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef __JUCE_HEADER_CE927AE98649C3BC__
#define __JUCE_HEADER_CE927AE98649C3BC__

//[Headers]     -- You can add your own extra header files here --
#include "JuceHeader.h"
#include "AboutBox.h"
class SphereScope;
class ToggleSwitch;
//[/Headers]



//==============================================================================
/**
                                                                    //[Comments]
    An auto-generated component, created by the Introjucer.

    Describe your class and how it works here!
                                                                    //[/Comments]
*/
class PluginView  : public Component,
                    private ValueTree::Listener,
                    public ButtonListener,
                    public SliderListener
{
public:
    //==============================================================================
    PluginView ();
    ~PluginView();

    //==============================================================================
    //[UserMethods]     -- You can add your own custom methods in this section.
    void stabilizeComponents (ValueTree pluginState);
    void setSphereValue (const float val);
    void mouseDown (const MouseEvent& ev) override;
    //[/UserMethods]

    void paint (Graphics& g);
    void resized();
    void buttonClicked (Button* buttonThatWasClicked);
    void sliderValueChanged (Slider* sliderThatWasMoved);



private:
    //[UserVariables]   -- You can add your own custom variables in this section.
    AboutBox about;
    ValueTree pluginState;
    BigInteger combs, allpasses;
    Array<Button*> combButtons, allPassButtons;

    friend class ValueTree::Listener;
    virtual void valueTreePropertyChanged (ValueTree& treeWhosePropertyHasChanged,
                                           const Identifier& property);
    virtual void valueTreeChildAdded (ValueTree& parentTree,
                                      ValueTree& childWhichHasBeenAdded) {}
    virtual void valueTreeChildRemoved (ValueTree& parentTree,
                                        ValueTree& childWhichHasBeenRemoved,
                                        int indexFromWhichChildWasRemoved) {}
    virtual void valueTreeChildOrderChanged (ValueTree& parentTreeWhoseChildrenHaveMoved,
                                             int oldIndex, int newIndex) {}
    virtual void valueTreeParentChanged (ValueTree& treeWhoseParentHasChanged) {}
    virtual void valueTreeRedirected (ValueTree& treeWhichHasBeenChanged){ }
    //[/UserVariables]

    //==============================================================================
    ScopedPointer<SphereScope> sphere;
    ScopedPointer<ToggleSwitch> comb4;
    ScopedPointer<ToggleButton> frozen;
    ScopedPointer<Label> roomSizeLabel;
    ScopedPointer<Label> dampingLabel;
    ScopedPointer<Label> wetLabel;
    ScopedPointer<Label> dryLabel;
    ScopedPointer<Label> widthLabel;
    ScopedPointer<ToggleSwitch> comb1;
    ScopedPointer<ToggleSwitch> comb2;
    ScopedPointer<ToggleSwitch> comb5;
    ScopedPointer<ToggleSwitch> comb6;
    ScopedPointer<ToggleSwitch> comb3;
    ScopedPointer<ToggleSwitch> comb7;
    ScopedPointer<ToggleSwitch> comb8;
    ScopedPointer<ToggleSwitch> allpass1;
    ScopedPointer<ToggleSwitch> allpass2;
    ScopedPointer<ToggleSwitch> allpass3;
    ScopedPointer<ToggleSwitch> allpass4;
    ScopedPointer<Element::SkinDial> width;
    ScopedPointer<Element::SkinDial> damping;
    ScopedPointer<Element::SkinDial> roomSize;
    ScopedPointer<Element::SkinDial> wetLevel;
    ScopedPointer<Element::SkinDial> dryLevel;
    ScopedPointer<Label> label;
    ScopedPointer<Label> label3;
    ScopedPointer<TextButton> helpButton;
    ScopedPointer<Drawable> drawable1;


    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (PluginView)
};

//[EndFile] You can add extra defines here...
//[/EndFile]

#endif   // __JUCE_HEADER_CE927AE98649C3BC__
